// Code generated by tutone: DO NOT EDIT
package edge

import (
	"context"

	"github.com/newrelic/newrelic-client-go/pkg/errors"
)

// Create one or more trace filter rules, as defined by the `CreateTraceFilterRulesInput`.
func (a *Edge) EdgeCreateTraceFilterRules(
	accountID int,
	rules EdgeCreateTraceFilterRulesInput,
	traceObserverId int,
) (*EdgeCreateTraceFilterRuleResponses, error) {
	return a.EdgeCreateTraceFilterRulesWithContext(context.Background(),
		accountID,
		rules,
		traceObserverId,
	)
}

// Create one or more trace filter rules, as defined by the `CreateTraceFilterRulesInput`.
func (a *Edge) EdgeCreateTraceFilterRulesWithContext(
	ctx context.Context,
	accountID int,
	rules EdgeCreateTraceFilterRulesInput,
	traceObserverId int,
) (*EdgeCreateTraceFilterRuleResponses, error) {

	resp := EdgeCreateTraceFilterRulesQueryResponse{}
	vars := map[string]interface{}{
		"accountId":       accountID,
		"rules":           rules,
		"traceObserverId": traceObserverId,
	}

	if err := a.client.NerdGraphQueryWithContext(ctx, EdgeCreateTraceFilterRulesMutation, vars, &resp); err != nil {
		return nil, err
	}

	return &resp.EdgeCreateTraceFilterRuleResponses, nil
}

type EdgeCreateTraceFilterRulesQueryResponse struct {
	EdgeCreateTraceFilterRuleResponses EdgeCreateTraceFilterRuleResponses `json:"EdgeCreateTraceFilterRules"`
}

const EdgeCreateTraceFilterRulesMutation = `mutation(
	$accountId: Int!,
	$rules: EdgeCreateTraceFilterRulesInput!,
	$traceObserverId: Int!,
) { edgeCreateTraceFilterRules(
	accountId: $accountId,
	rules: $rules,
	traceObserverId: $traceObserverId,
) {
	spanAttributeRules {
		errors {
			message
			type
		}
		rules {
			action
			id
			key
			keyOperator
			value
			valueOperator
		}
	}
} }`

// Create one or more trace observers, as defined by the `CreateTraceObserverInput`. Currently, only one trace observer can be created per provider region.
func (a *Edge) EdgeCreateTraceObserver(
	accountID int,
	traceObserverConfigs []EdgeCreateTraceObserverInput,
) (*EdgeCreateTraceObserverResponses, error) {
	return a.EdgeCreateTraceObserverWithContext(context.Background(),
		accountID,
		traceObserverConfigs,
	)
}

// Create one or more trace observers, as defined by the `CreateTraceObserverInput`. Currently, only one trace observer can be created per provider region.
func (a *Edge) EdgeCreateTraceObserverWithContext(
	ctx context.Context,
	accountID int,
	traceObserverConfigs []EdgeCreateTraceObserverInput,
) (*EdgeCreateTraceObserverResponses, error) {

	resp := EdgeCreateTraceObserverQueryResponse{}
	vars := map[string]interface{}{
		"accountId":            accountID,
		"traceObserverConfigs": traceObserverConfigs,
	}

	if err := a.client.NerdGraphQueryWithContext(ctx, EdgeCreateTraceObserverMutation, vars, &resp); err != nil {
		return nil, err
	}

	return &resp.EdgeCreateTraceObserverResponses, nil
}

type EdgeCreateTraceObserverQueryResponse struct {
	EdgeCreateTraceObserverResponses EdgeCreateTraceObserverResponses `json:"EdgeCreateTraceObserver"`
}

const EdgeCreateTraceObserverMutation = `mutation(
	$accountId: Int!,
	$traceObserverConfigs: [EdgeCreateTraceObserverInput!]!,
) { edgeCreateTraceObserver(
	accountId: $accountId,
	traceObserverConfigs: $traceObserverConfigs,
) {
	responses {
		errors {
			message
			type
		}
		traceObserver {
			endpoints {
				endpointType
				status
			}
			id
			monitoringAccountId
			name
			providerRegion
			status
		}
	}
} }`

// Delete one or more trace filter rules, as defined by the `DeleteTraceFilterRulesInput`.
func (a *Edge) EdgeDeleteTraceFilterRules(
	accountID int,
	rules EdgeDeleteTraceFilterRulesInput,
	traceObserverId int,
) (*EdgeDeleteTraceFilterRuleResponses, error) {
	return a.EdgeDeleteTraceFilterRulesWithContext(context.Background(),
		accountID,
		rules,
		traceObserverId,
	)
}

// Delete one or more trace filter rules, as defined by the `DeleteTraceFilterRulesInput`.
func (a *Edge) EdgeDeleteTraceFilterRulesWithContext(
	ctx context.Context,
	accountID int,
	rules EdgeDeleteTraceFilterRulesInput,
	traceObserverId int,
) (*EdgeDeleteTraceFilterRuleResponses, error) {

	resp := EdgeDeleteTraceFilterRulesQueryResponse{}
	vars := map[string]interface{}{
		"accountId":       accountID,
		"rules":           rules,
		"traceObserverId": traceObserverId,
	}

	if err := a.client.NerdGraphQueryWithContext(ctx, EdgeDeleteTraceFilterRulesMutation, vars, &resp); err != nil {
		return nil, err
	}

	return &resp.EdgeDeleteTraceFilterRuleResponses, nil
}

type EdgeDeleteTraceFilterRulesQueryResponse struct {
	EdgeDeleteTraceFilterRuleResponses EdgeDeleteTraceFilterRuleResponses `json:"EdgeDeleteTraceFilterRules"`
}

const EdgeDeleteTraceFilterRulesMutation = `mutation(
	$accountId: Int!,
	$rules: EdgeDeleteTraceFilterRulesInput!,
	$traceObserverId: Int!,
) { edgeDeleteTraceFilterRules(
	accountId: $accountId,
	rules: $rules,
	traceObserverId: $traceObserverId,
) {
	spanAttributeRules {
		errors {
			message
			type
		}
		rule {
			action
			id
			key
			keyOperator
			value
			valueOperator
		}
	}
} }`

func (a *Edge) EdgeDeleteTraceObservers(
	accountID int,
	traceObserverConfigs []EdgeDeleteTraceObserverInput,
) (*EdgeDeleteTraceObserverResponses, error) {
	return a.EdgeDeleteTraceObserversWithContext(context.Background(),
		accountID,
		traceObserverConfigs,
	)
}

func (a *Edge) EdgeDeleteTraceObserversWithContext(
	ctx context.Context,
	accountID int,
	traceObserverConfigs []EdgeDeleteTraceObserverInput,
) (*EdgeDeleteTraceObserverResponses, error) {

	resp := EdgeDeleteTraceObserversQueryResponse{}
	vars := map[string]interface{}{
		"accountId":            accountID,
		"traceObserverConfigs": traceObserverConfigs,
	}

	if err := a.client.NerdGraphQueryWithContext(ctx, EdgeDeleteTraceObserversMutation, vars, &resp); err != nil {
		return nil, err
	}

	return &resp.EdgeDeleteTraceObserverResponses, nil
}

type EdgeDeleteTraceObserversQueryResponse struct {
	EdgeDeleteTraceObserverResponses EdgeDeleteTraceObserverResponses `json:"EdgeDeleteTraceObservers"`
}

const EdgeDeleteTraceObserversMutation = `mutation(
	$accountId: Int!,
	$traceObserverConfigs: [EdgeDeleteTraceObserverInput!]!,
) { edgeDeleteTraceObservers(
	accountId: $accountId,
	traceObserverConfigs: $traceObserverConfigs,
) {
	responses {
		errors {
			message
			type
		}
		traceObserver {
			endpoints {
				endpointType
				status
			}
			id
			monitoringAccountId
			name
			providerRegion
			status
		}
	}
} }`

// Update one or more trace observers, as defined by the `UpdateTraceObserverInput`.
func (a *Edge) EdgeUpdateTraceObservers(
	accountID int,
	traceObserverConfigs []EdgeUpdateTraceObserverInput,
) (*EdgeUpdateTraceObserverResponses, error) {
	return a.EdgeUpdateTraceObserversWithContext(context.Background(),
		accountID,
		traceObserverConfigs,
	)
}

// Update one or more trace observers, as defined by the `UpdateTraceObserverInput`.
func (a *Edge) EdgeUpdateTraceObserversWithContext(
	ctx context.Context,
	accountID int,
	traceObserverConfigs []EdgeUpdateTraceObserverInput,
) (*EdgeUpdateTraceObserverResponses, error) {

	resp := EdgeUpdateTraceObserversQueryResponse{}
	vars := map[string]interface{}{
		"accountId":            accountID,
		"traceObserverConfigs": traceObserverConfigs,
	}

	if err := a.client.NerdGraphQueryWithContext(ctx, EdgeUpdateTraceObserversMutation, vars, &resp); err != nil {
		return nil, err
	}

	return &resp.EdgeUpdateTraceObserverResponses, nil
}

type EdgeUpdateTraceObserversQueryResponse struct {
	EdgeUpdateTraceObserverResponses EdgeUpdateTraceObserverResponses `json:"EdgeUpdateTraceObservers"`
}

const EdgeUpdateTraceObserversMutation = `mutation(
	$accountId: Int!,
	$traceObserverConfigs: [EdgeUpdateTraceObserverInput!]!,
) { edgeUpdateTraceObservers(
	accountId: $accountId,
	traceObserverConfigs: $traceObserverConfigs,
) {
	responses {
		errors {
			message
			type
		}
		traceObserver {
			endpoints {
				endpointType
				status
			}
			id
			monitoringAccountId
			name
			providerRegion
			status
		}
	}
} }`

// Lists the existing trace observers for this account family.
func (a *Edge) GetTraceObservers(
	accountID int,
	iDs []int,
) (*[]EdgeTraceObserver, error) {
	return a.GetTraceObserversWithContext(context.Background(),
		accountID,
		iDs,
	)
}

// Lists the existing trace observers for this account family.
func (a *Edge) GetTraceObserversWithContext(
	ctx context.Context,
	accountID int,
	iDs []int,
) (*[]EdgeTraceObserver, error) {

	resp := traceObserversResponse{}
	vars := map[string]interface{}{
		"accountID": accountID,
		"ids":       iDs,
	}

	if err := a.client.NerdGraphQueryWithContext(ctx, getTraceObserversQuery, vars, &resp); err != nil {
		return nil, err
	}

	if len(resp.Actor.Account.Edge.Tracing.TraceObservers) == 0 {
		return nil, errors.NewNotFound("")
	}

	return &resp.Actor.Account.Edge.Tracing.TraceObservers, nil
}

const getTraceObserversQuery = `query(
	$accountID: Int!,
	$ids: [Int!],
) { actor { account(id: $accountID) { edge { tracing { traceObservers(
	ids: $ids,
) {
	endpoints {
		agent {
			host
			port
		}
		endpointType
		https {
			host
			port
			url
		}
		status
	}
	id
	monitoringAccountId
	name
	providerRegion
	status
	traceFilters {
		randomTraceFilter {
			percentKept
		}
	}
} } } } } }`
